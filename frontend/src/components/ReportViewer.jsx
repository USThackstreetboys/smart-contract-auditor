import React, { useState } from 'react';
import { Download, Eye, FileText, Share, Printer } from 'lucide-react';

const ReportViewer = ({ analysisResult }) => {
  const [viewMode, setViewMode] = useState('summary');
  const [exportFormat, setExportFormat] = useState('json');

  if (!analysisResult) {
    return (
      <div className="text-center py-8">
        <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">No report data available</p>
      </div>
    );
  }

  const generateTextReport = () => {
    let report = `SMART CONTRACT SECURITY ANALYSIS REPORT\n`;
    report += `==========================================\n\n`;
    report += `Contract Name: ${analysisResult.contractName}\n`;
    report += `File: ${analysisResult.fileName}\n`;
    report += `Analysis Date: ${new Date(analysisResult.analysisTimestamp).toLocaleString()}\n`;
    report += `Overall Risk Score: ${analysisResult.overallRiskScore}/10\n`;
    report += `Total Vulnerabilities: ${analysisResult.totalVulnerabilities}\n\n`;
    
    // Contract Information
    report += `CONTRACT INFORMATION:\n`;
    report += `====================\n`;
    report += `Lines of Code: ${analysisResult.contractInfo?.linesOfCode || 'N/A'}\n`;
    report += `Complexity: ${analysisResult.contractInfo?.complexity || 'N/A'}\n`;
    report += `Functions: ${analysisResult.contractInfo?.functions?.length || 0}\n`;
    report += `State Variables: ${analysisResult.contractInfo?.stateVariables?.length || 0}\n`;
    report += `Events: ${analysisResult.contractInfo?.events?.length || 0}\n`;
    report += `Modifiers: ${analysisResult.contractInfo?.modifiers?.length || 0}\n\n`;
    
    // Vulnerabilities
    if (analysisResult.vulnerabilities && analysisResult.vulnerabilities.length > 0) {
      report += `VULNERABILITIES FOUND:\n`;
      report += `=====================\n\n`;
      
      analysisResult.vulnerabilities.forEach((vuln, index) => {
        report += `${index + 1}. ${vuln.title}\n`;
        report += `   Severity: ${vuln.severity}\n`;
        report += `   Type: ${vuln.type}\n`;
        report += `   Risk Score: ${vuln.riskScore}/10\n`;
        report += `   Location: Line ${vuln.location.startLine}`;
        if (vuln.location.function) {
          report += ` in function ${vuln.location.function}()`;
        }
        report += `\n`;
        report += `   Description: ${vuln.description}\n`;
        report += `   Impact: ${vuln.impact}\n`;
        report += `   Recommendation: ${vuln.recommendation}\n`;
        if (vuln.potentialLoss) {
          report += `   Potential Loss: ${vuln.potentialLoss}\n`;
        }
        report += `\n`;
      });
    } else {
      report += `No vulnerabilities detected. Contract appears secure.\n\n`;
    }
    
    // AI Insights
    if (analysisResult.aiInsights && analysisResult.aiInsights.length > 0) {
      report += `AI INSIGHTS:\n`;
      report += `============\n\n`;
      
      analysisResult.aiInsights.forEach((insight, index) => {
        report += `${index + 1}. ${insight.category}: ${insight.insight}\n`;
        report += `   Confidence: ${Math.round(insight.confidence * 100)}%\n\n`;
      });
    }
    
    report += `Report generated by Smart Contract AI Auditor\n`;
    report += `Visit: https://smartcontractauditor.com\n`;
    
    return report;
  };

  const downloadReport = () => {
    let content, filename, mimeType;
    
    switch (exportFormat) {
      case 'json':
        content = JSON.stringify(analysisResult, null, 2);
        filename = `${analysisResult.contractName}_analysis.json`;
        mimeType = 'application/json';
        break;
      case 'txt':
        content = generateTextReport();
        filename = `${analysisResult.contractName}_report.txt`;
        mimeType = 'text/plain';
        break;
      default:
        return;
    }
    
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareReport = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Security Analysis: ${analysisResult.contractName}`,
          text: `Found ${analysisResult.totalVulnerabilities} vulnerabilities with risk score ${analysisResult.overallRiskScore}/10`,
          url: window.location.href,
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      const shareText = `Security Analysis: ${analysisResult.contractName}\nRisk Score: ${analysisResult.overallRiskScore}/10\nVulnerabilities: ${analysisResult.totalVulnerabilities}`;
      navigator.clipboard.writeText(shareText);
      alert('Report summary copied to clipboard!');
    }
  };

  const printReport = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Security Analysis Report - ${analysisResult.contractName}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1, h2 { color: #333; }
            .vulnerability { margin-bottom: 20px; padding: 10px; border-left: 4px solid #ddd; }
            .critical { border-left-color: #dc2626; }
            .high { border-left-color: #ea580c; }
            .medium { border-left-color: #d97706; }
            .low { border-left-color: #2563eb; }
          </style>
        </head>
        <body>
          <h1>Smart Contract Security Analysis Report</h1>
          <p><strong>Contract:</strong> ${analysisResult.contractName}</p>
          <p><strong>File:</strong> ${analysisResult.fileName}</p>
          <p><strong>Analysis Date:</strong> ${new Date(analysisResult.analysisTimestamp).toLocaleString()}</p>
          <p><strong>Risk Score:</strong> ${analysisResult.overallRiskScore}/10</p>
          <p><strong>Total Vulnerabilities:</strong> ${analysisResult.totalVulnerabilities}</p>
          
          <h2>Vulnerabilities</h2>
          ${analysisResult.vulnerabilities.map(vuln => `
            <div class="vulnerability ${vuln.severity.toLowerCase()}">
              <h3>${vuln.title}</h3>
              <p><strong>Severity:</strong> ${vuln.severity}</p>
              <p><strong>Type:</strong> ${vuln.type}</p>
              <p><strong>Description:</strong> ${vuln.description}</p>
              <p><strong>Recommendation:</strong> ${vuln.recommendation}</p>
            </div>
          `).join('')}
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <div className="space-y-6">
      {/* Report Controls */}
      <div className="bg-white rounded-lg shadow-md p-6 border">
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div className="flex items-center space-x-4">
            <h2 className="text-xl font-semibold text-gray-900">Analysis Report</h2>
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setViewMode('summary')}
                className={`px-3 py-1 text-sm rounded-md transition-colors ${
                  viewMode === 'summary' 
                    ? 'bg-white text-gray-900 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Summary
              </button>
              <button
                onClick={() => setViewMode('detailed')}
                className={`px-3 py-1 text-sm rounded-md transition-colors ${
                  viewMode === 'detailed' 
                    ? 'bg-white text-gray-900 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Detailed
              </button>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <select
              value={exportFormat}
              onChange={(e) => setExportFormat(e.target.value)}
              className="text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="json">JSON</option>
              <option value="txt">Text</option>
            </select>
            
            <button
              onClick={downloadReport}
              className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <Download className="w-4 h-4 mr-1" />
              Download
            </button>
            
            <button
              onClick={shareReport}
              className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <Share className="w-4 h-4 mr-1" />
              Share
            </button>
            
            <button
              onClick={printReport}
              className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <Printer className="w-4 h-4 mr-1" />
              Print
            </button>
          </div>
        </div>
      </div>

      {/* Report Content */}
      {viewMode === 'summary' ? (
        <div className="bg-white rounded-lg shadow-md p-6 border">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Executive Summary</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Contract Overview</h4>
              <dl className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <dt className="text-gray-600">Name:</dt>
                  <dd className="text-gray-900">{analysisResult.contractName}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">File:</dt>
                  <dd className="text-gray-900">{analysisResult.fileName}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">Lines of Code:</dt>
                  <dd className="text-gray-900">{analysisResult.contractInfo?.linesOfCode || 'N/A'}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">Complexity:</dt>
                  <dd className="text-gray-900">{analysisResult.contractInfo?.complexity || 'N/A'}</dd>
                </div>
              </dl>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Security Assessment</h4>
              <dl className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <dt className="text-gray-600">Risk Score:</dt>
                  <dd className="text-gray-900 font-medium">{analysisResult.overallRiskScore}/10</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">Total Issues:</dt>
                  <dd className="text-gray-900">{analysisResult.totalVulnerabilities}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">Critical:</dt>
                  <dd className="text-red-600 font-medium">
                    {analysisResult.vulnerabilities.filter(v => v.severity === 'CRITICAL').length}
                  </dd>
                </div>
                <div className="flex justify-between">
                  <dt className="text-gray-600">High:</dt>
                  <dd className="text-orange-600 font-medium">
                    {analysisResult.vulnerabilities.filter(v => v.severity === 'HIGH').length}
                  </dd>
                </div>
              </dl>
            </div>
          </div>
          
          {/* Top Vulnerabilities */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Top Security Issues</h4>
            <div className="space-y-2">
              {analysisResult.vulnerabilities
                .sort((a, b) => b.riskScore - a.riskScore)
                .slice(0, 5)
                .map((vuln, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <span className="font-medium text-gray-900">{vuln.title}</span>
                      <span className="text-sm text-gray-600 ml-2">({vuln.type})</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        vuln.severity === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                        vuln.severity === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                        vuln.severity === 'MEDIUM' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-blue-100 text-blue-800'
                      }`}>
                        {vuln.severity}
                      </span>
                      <span className="text-sm text-gray-600">{vuln.riskScore}/10</span>
                    </div>
                  </div>
                ))}
            </div>
          </div>
          
          {/* Recommendations */}
          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">Recommendations</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              {analysisResult.overallRiskScore >= 8 && (
                <li>🚨 <strong>Critical:</strong> Do not deploy - address critical vulnerabilities immediately</li>
              )}
              {analysisResult.overallRiskScore >= 6 && analysisResult.overallRiskScore < 8 && (
                <li>⚠️ <strong>High Risk:</strong> Fix high-severity issues before deployment</li>
              )}
              {analysisResult.overallRiskScore >= 4 && analysisResult.overallRiskScore < 6 && (
                <li>⚡ <strong>Medium Risk:</strong> Address medium-priority vulnerabilities</li>
              )}
              {analysisResult.overallRiskScore < 4 && (
                <li>✅ <strong>Good Security:</strong> Minor issues to review, generally ready for deployment</li>
              )}
              <li>🔍 Consider professional audit for high-value contracts</li>
              <li>🔧 Test all fixes in development environment before deployment</li>
            </ul>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-md p-6 border">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Detailed Analysis Report</h3>
          
          {/* Contract Metadata */}
          <div className="mb-8">
            <h4 className="font-medium text-gray-900 mb-3">Contract Information</h4>
            <div className="bg-gray-50 rounded-lg p-4">
              <pre className="text-sm text-gray-700 whitespace-pre-wrap">
{`Contract Name: ${analysisResult.contractName}
File: ${analysisResult.fileName}
Analysis Timestamp: ${new Date(analysisResult.analysisTimestamp).toLocaleString()}
Lines of Code: ${analysisResult.contractInfo?.linesOfCode || 'N/A'}
Complexity: ${analysisResult.contractInfo?.complexity || 'N/A'}
Functions: ${analysisResult.contractInfo?.functions?.join(', ') || 'N/A'}
State Variables: ${analysisResult.contractInfo?.stateVariables?.join(', ') || 'N/A'}
Events: ${analysisResult.contractInfo?.events?.join(', ') || 'N/A'}
Modifiers: ${analysisResult.contractInfo?.modifiers?.join(', ') || 'N/A'}

Risk Assessment:
- Overall Risk Score: ${analysisResult.overallRiskScore}/10
- Total Vulnerabilities: ${analysisResult.totalVulnerabilities}
- Critical: ${analysisResult.vulnerabilities.filter(v => v.severity === 'CRITICAL').length}
- High: ${analysisResult.vulnerabilities.filter(v => v.severity === 'HIGH').length}
- Medium: ${analysisResult.vulnerabilities.filter(v => v.severity === 'MEDIUM').length}
- Low: ${analysisResult.vulnerabilities.filter(v => v.severity === 'LOW').length}`}
              </pre>
            </div>
          </div>
          
          {/* Detailed Vulnerabilities */}
          {analysisResult.vulnerabilities && analysisResult.vulnerabilities.length > 0 && (
            <div className="mb-8">
              <h4 className="font-medium text-gray-900 mb-3">Vulnerability Details</h4>
              <div className="space-y-6">
                {analysisResult.vulnerabilities.map((vuln, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h5 className="font-medium text-gray-900">{index + 1}. {vuln.title}</h5>
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        vuln.severity === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                        vuln.severity === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                        vuln.severity === 'MEDIUM' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-blue-100 text-blue-800'
                      }`}>
                        {vuln.severity}
                      </span>
                    </div>
                    
                    <dl className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                      <div>
                        <dt className="font-medium text-gray-900">Type:</dt>
                        <dd className="text-gray-700">{vuln.type}</dd>
                      </div>
                      <div>
                        <dt className="font-medium text-gray-900">Risk Score:</dt>
                        <dd className="text-gray-700">{vuln.riskScore}/10</dd>
                      </div>
                      <div>
                        <dt className="font-medium text-gray-900">Location:</dt>
                        <dd className="text-gray-700">
                          Line {vuln.location.startLine}
                          {vuln.location.startLine !== vuln.location.endLine && `-${vuln.location.endLine}`}
                          {vuln.location.function && ` in ${vuln.location.function}()`}
                        </dd>
                      </div>
                      <div>
                        <dt className="font-medium text-gray-900">Detection Method:</dt>
                        <dd className="text-gray-700">{vuln.detectionMethod}</dd>
                      </div>
                    </dl>
                    
                    <div className="mt-4 space-y-3">
                      <div>
                        <dt className="font-medium text-gray-900 mb-1">Description:</dt>
                        <dd className="text-gray-700 text-sm">{vuln.description}</dd>
                      </div>
                      <div>
                        <dt className="font-medium text-gray-900 mb-1">Impact:</dt>
                        <dd className="text-gray-700 text-sm">{vuln.impact}</dd>
                      </div>
                      <div>
                        <dt className="font-medium text-gray-900 mb-1">Recommendation:</dt>
                        <dd className="text-gray-700 text-sm">{vuln.recommendation}</dd>
                      </div>
                      {vuln.potentialLoss && (
                        <div>
                          <dt className="font-medium text-gray-900 mb-1">Potential Loss:</dt>
                          <dd className="text-red-700 text-sm font-medium">{vuln.potentialLoss}</dd>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* AI Insights */}
          {analysisResult.aiInsights && analysisResult.aiInsights.length > 0 && (
            <div>
              <h4 className="font-medium text-gray-900 mb-3">AI Insights</h4>
              <div className="space-y-3">
                {analysisResult.aiInsights.map((insight, index) => (
                  <div key={index} className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-blue-900">{insight.category}</span>
                      <span className="text-xs text-blue-600">
                        Confidence: {Math.round(insight.confidence * 100)}%
                      </span>
                    </div>
                    <p className="text-blue-800 text-sm">{insight.insight}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ReportViewer;
